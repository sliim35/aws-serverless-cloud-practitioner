Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Timeout: 3

Resources:
  ApiGateway:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowOrigins:
          - "*"
        AllowMethods:
          - GET
          - POST
          - DELETE
        MaxAge: 600
      StageName: dev

  GetProductsList:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: getProductsList.handler
      Runtime: nodejs18.x
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        Products:
          Type: HttpApi
          Properties:
            ApiId: !Ref ApiGateway
            Path: /products
            Method: get
      Environment:
        Variables:
          TABLE_NAME: !Ref Products
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - getProductsList.ts
    Connectors:
      GetProductsConnector:
        Properties:
          Destination:
            Id: Products
          Permissions:
            - Read

  GetProductsById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: getProductsById.handler
      Runtime: nodejs18.x
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        Products:
          Type: HttpApi
          Properties:
            ApiId: !Ref ApiGateway
            Path: /products/{id}
            Method: get
      Environment:
        Variables:
          TABLE_NAME: !Ref Products
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - getProductsById.ts
    Connectors:
      GetProductByIdConnector:
        Properties:
          Destination:
            Id: Products
          Permissions:
            - Read

  CatalogBatchProcess:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: src/catalogBatchProcess.handler
      Runtime: nodejs18.x
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonSNSFullAccess
      Events:
        CatalogBatchProcessEvent:
          Type: SQS
          Properties:
            BatchSize: 5
            MaximumBatchingWindowInSeconds: 5
            Queue: !GetAtt CatalogItemsQueue.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref Products
          EMAIL_TOPIC_ARN: !GetAtt EmailTopic.TopicArn
    Connectors:
      CatalogBatchProcessConnector:
        Properties:
          Destination:
            Id: CatalogItemsQueue
          Permissions:
            - Read
      WriteDBConnector:
        Properties:
          Destination:
            Id: Products
          Permissions:
            - Write
      WriteToEmailSnsTopic:
        Properties:
          Destination:
            Id: EmailTopic
          Permissions:
            - Write
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - src/catalogBatchProcess.ts
        External:
          - "@aws-sdk/client-dynamodb"
          - "@aws-sdk/util-dynamodb"

  CatalogItemsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: CatalogItemsQueue
      SqsManagedSseEnabled: false
      VisibilityTimeout: 65 # If your batch window is greater than 0, and (batch window) + (function timeout) > (queue visibility timeout), then your effective queue visibility timeout is (batch window) + (function timeout) + 30s

  Products:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: Products
      PrimaryKey:
        Name: id
        Type: String

  EmailTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "CreateProductTopic"

Outputs:
  CatalogItemsQueueUrl:
    Value: !GetAtt CatalogItemsQueue.QueueUrl
    Export:
      Name: SQSUrl
  CatalogItemsQueueArn:
    Value: !GetAtt CatalogItemsQueue.Arn
    Export:
      Name: SQSArn
